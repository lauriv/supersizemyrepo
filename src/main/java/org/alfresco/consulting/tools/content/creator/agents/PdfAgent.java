package org.alfresco.consulting.tools.content.creator.agents;

import java.io.File;
import java.io.FileOutputStream;
import java.util.Calendar;
import java.util.Date;
import java.util.Properties;
import java.util.Random;

import org.alfresco.consulting.tools.content.creator.BulkImportManifestCreator;
import org.alfresco.consulting.words.RandomWords;

import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

public class PdfAgent extends AbstractAgent implements Runnable {

    private static Font catFont = new Font(Font.FontFamily.HELVETICA, 18,Font.BOLD);
    private static Font redFont = new Font(Font.FontFamily.HELVETICA, 12,Font.NORMAL, BaseColor.RED);
    private static Font subFont = new Font(Font.FontFamily.HELVETICA, 16,Font.BOLD);
    private static Font smallBold = new Font(Font.FontFamily.HELVETICA, 12,Font.BOLD);

    public PdfAgent(final String _files_deployment_location, final String _images_location, final Properties _properties) {
        super(_files_deployment_location, _images_location, _properties);
    }

    public PdfAgent(final String _max_files_per_folder,final String _files_deployment_location, final String _images_location, final Properties _properties) {
        super(_max_files_per_folder, _files_deployment_location, _images_location, _properties);
    }


    @Override
    public void run() {

        try
        {
            File deploymentFolder = new File(files_deployment_location);
            File[] deploymentfiles =   deploymentFolder.listFiles();
            int total_deployment_size = deploymentfiles.length;
            // checking if the deployment location is full (more than max_files_per_folder files)
            if (total_deployment_size>Integer.valueOf(max_files_per_folder)) {
                files_deployment_location = createDir(files_deployment_location);

                levelDeep++;
                if (levelDeep > MAX_LEVELS) {
                    files_deployment_location = createDir(originalFilesDeploymentLocation);
                    levelDeep = 1;
                }
            }
            createPdf();
        }
        catch(Exception e)
        {
            System.out.println("Exception" + e.getMessage());
        }
    }

    private String createDir(final String deploymentLocation) {
        Calendar calendar = Calendar.getInstance();
        String dir_name = deploymentLocation + "/" + calendar.getTimeInMillis();
        boolean success = (new File(dir_name)).mkdirs();
        //this.files_deployment_location = dir_name;
        if (!success) {
            System.out.println("PDF - Failed to create directory " + dir_name );
            if (new File(dir_name).exists()) {
                System.out.println("PDF - Directory already exists " + dir_name );
            } else {
                System.out.println("PDF - Could not create directory, we will die " + dir_name );
            }
        }
        return dir_name;
    }

    // iText allows to add metadata to the PDF which can be viewed in your Adobe Reader under File -> Properties
    private static void addMetaData(final Document document) {
        document.addTitle("SSMR Generated PDF");
        document.addSubject("Using iText");
        document.addKeywords("Java, PDF, iText, Alfresco, BulkImport");
        document.addAuthor("Super Size My Repo");
        document.addCreator("Luis Cabaceira");
        document.addCreationDate();
    }

    private static void addTitlePage(final Document document)
            throws DocumentException {
        Paragraph preface = new Paragraph();
        // We add one empty line
        addEmptyLine(preface, 1);
        // Lets write a big header
        preface.add(new Paragraph(RandomWords.getWords(4), catFont));
        addEmptyLine(preface, 1);
        // Will create: Report generated by: _name, _date
        preface.add(new Paragraph("Report generated by: " + System.getProperty("user.name") + ", " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
                smallBold));
        addEmptyLine(preface, 3);
        preface.add(new Paragraph(RandomWords.getWords(500),smallBold));
        addEmptyLine(preface, 8);
        preface.add(new Paragraph("This document was created with the supersizemyrepo tool, beta version.",redFont));
        document.add(preface);
        // Start a new page
        document.newPage();
    }

    private static void addContent(final Document document) throws DocumentException {
        Anchor anchor = new Anchor(RandomWords.getWords(2), catFont);
        anchor.setName(RandomWords.getWords(2));
        // Second parameter is the number of the chapter
        Chapter catPart = new Chapter(new Paragraph(anchor), 1);
        Paragraph subPara = new Paragraph(RandomWords.getWords(2), subFont);
        Section subCatPart = catPart.addSection(subPara);
        subCatPart.add(new Paragraph(RandomWords.getWords(500)));

        subPara = new Paragraph("Subcategory 2", subFont);
        subCatPart = catPart.addSection(subPara);
        subCatPart.add(new Paragraph(RandomWords.getWords(20)));
        subCatPart.add(new Paragraph(RandomWords.getWords(40)));
        subCatPart.add(new Paragraph(RandomWords.getWords(600)));

        // add a list
        createList(subCatPart);
        Paragraph paragraph = new Paragraph();
        addEmptyLine(paragraph, 5);
        subCatPart.add(paragraph);
        // add a table
        createTable(subCatPart);
        // now add all this to the document
        document.add(catPart);
        // Next section
        anchor = new Anchor(RandomWords.getWords(2), catFont);
        anchor.setName(RandomWords.getWords(4));
        // Second parameter is the number of the chapter
        catPart = new Chapter(new Paragraph(anchor), 1);
        subPara = new Paragraph(RandomWords.getWords(1), subFont);
        subCatPart = catPart.addSection(subPara);
        subCatPart.add(new Paragraph(RandomWords.getWords(300)));
        // now add all this to the document
        document.add(catPart);
    }

    private static void createTable(final Section subCatPart)
            throws BadElementException {
        PdfPTable table = new PdfPTable(3);

        // t.setBorderColor(BaseColor.GRAY);
        // t.setPadding(4);
        // t.setSpacing(4);
        // t.setBorderWidth(1);

        PdfPCell c1 = new PdfPCell(new Phrase(RandomWords.getWords(3)));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase(RandomWords.getWords(3)));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase(RandomWords.getWords(3)));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);
        table.setHeaderRows(1);

        table.addCell("1.0");
        table.addCell("1.1");
        table.addCell("1.2");
        table.addCell("2.1");
        table.addCell("2.2");
        table.addCell("2.3");

        subCatPart.add(table);

    }

    private static void createList(final Section subCatPart) {
        List list = new List(true, false, 10);
        list.add(new ListItem(RandomWords.getWords(2)));
        list.add(new ListItem(RandomWords.getWords(2)));
        list.add(new ListItem(RandomWords.getWords(2)));
        subCatPart.add(list);
    }

    private static void addEmptyLine(final Paragraph paragraph, final int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }

    private void createPdf() throws Exception {

        //System.out.println ("#### props size: " + properties.size());
        RandomWords.init();
        //DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
        Calendar cal = Calendar.getInstance();

        Document document = new Document();
        String fileName =  cal.getTimeInMillis() +"_PdfSSMR.pdf";
        String filePath = files_deployment_location + "/" + fileName;
        // Creating the metadata file
        BulkImportManifestCreator.createBulkManifest(fileName,files_deployment_location, properties);
        PdfWriter.getInstance(document, new FileOutputStream(filePath));
        document.open();

        addMetaData(document);
        addTitlePage(document);
        addContent(document);
        //addImages(document);

        document.close();
    }

    private void addImages(final Document document) throws Exception {
        File imagesFolder = new File(images_location);
        File[] files = imagesFolder.listFiles();

        // String imageUrl = "http://lorempixel.com/800/600/sports/Created with SSMR/";
        // Image image2 = Image.getInstance(new URL(imageUrl));
        // document.add(image2);

        //Random local image
        Random rand = new Random();

        // Do not add more images to keep the PDF size down
        for (int i = 0; i < 2; i++) {
            addImage(document, files, rand);
        }
    }

    private void addImage(final Document document, final File[] files, final Random rand) throws Exception {
        File randomImage11 = files[rand.nextInt(files.length)];
        String randomFilePath = randomImage11.getAbsolutePath();
        Image localimage = Image.getInstance(randomFilePath);
        document.add(localimage);
    }
}

